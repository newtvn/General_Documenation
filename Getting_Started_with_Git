# Comprehensive Git Tutorial

## Table of Contents
- [Comprehensive Git Tutorial](#comprehensive-git-tutorial)
  - [Table of Contents](#table-of-contents)
  - [**1. Install Git**](#1-install-git)
  - [**2. Set Up Git**](#2-set-up-git)
    - [Basic Configuration](#basic-configuration)
    - [Authentication Setup](#authentication-setup)
  - [**3. Basic Operations**](#3-basic-operations)
    - [Create Repository](#create-repository)
    - [First Commit Example](#first-commit-example)
  - [**4. Working with Changes**](#4-working-with-changes)
    - [Staging Changes](#staging-changes)
    - [Committing](#committing)
  - [**5. Remote Operations**](#5-remote-operations)
    - [Working with Remotes](#working-with-remotes)
  - [**6. Branching and Merging**](#6-branching-and-merging)
    - [Modern Git Flow](#modern-git-flow)
    - [Branch Management](#branch-management)
  - [**7. History and Tracking**](#7-history-and-tracking)
  - [**8. Undoing Changes**](#8-undoing-changes)
  - [**9. Collaboration**](#9-collaboration)
  - [**10. Advanced Topics**](#10-advanced-topics)
  - [**11. Troubleshooting**](#11-troubleshooting)

## **1. Install Git**
1. **Windows:** 
   - Download from [Git for Windows](https://git-scm.com/)
   - Use Windows Package Manager: `winget install Git.Git`

2. **Mac:** 
   - Use Homebrew: `brew install git`
   - Download installer from [git-scm.com](https://git-scm.com/)

3. **Linux:** Use package manager:
   - Ubuntu/Debian: `sudo apt-get install git`
   - Fedora: `sudo dnf install git`
   - Arch: `sudo pacman -S git`

## **2. Set Up Git**
### Basic Configuration
```bash
# Set your identity
git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"

# Set default editor (optional)
git config --global core.editor "code --wait"  # For VS Code

# Check settings
git config --list
```

### Authentication Setup
```bash
# Generate SSH key
ssh-keygen -t ed25519 -C "your_email@example.com"

# Start SSH agent
eval "$(ssh-agent -s)"

# Add SSH key to agent
ssh-add ~/.ssh/id_ed25519
```

## **3. Basic Operations**
### Create Repository
```bash
# Initialize new repository
cd your-project
git init

# Clone existing repository
git clone https://github.com/username/repository.git
git clone git@github.com:username/repository.git  # Using SSH
```

### First Commit Example
```bash
# Create and add content to README
echo "# My Project" > README.md

# Stage and commit
git add README.md
git commit -m "Initial commit: Add README"
```

## **4. Working with Changes**
### Staging Changes
```bash
# Stage specific files
git add filename.txt
git add folder/

# Stage all changes
git add .

# Stage parts of files
git add -p filename.txt

# See what's staged
git diff --staged
```

### Committing
```bash
# Standard commit
git commit -m "Add feature X"

# Commit with description
git commit -m "Add feature X" -m "Detailed description of the changes..."

# Amend last commit
git commit --amend
```

## **5. Remote Operations**
### Working with Remotes
```bash
# Add remote
git remote add origin https://github.com/username/repo.git

# Push to remote
git push -u origin main  # First time
git push                 # Subsequent pushes

# Fetch and merge changes
git fetch origin
git pull origin main
```

## **6. Branching and Merging**
### Modern Git Flow
```bash
# Feature branch workflow
git checkout -b feature/user-authentication
git add .
git commit -m "Add user authentication"
git push -u origin feature/user-authentication

# Create pull request (on GitHub/GitLab)
# After review and approval:
git checkout main
git pull origin main
git merge feature/user-authentication
git push origin main
```

### Branch Management
```bash
# List branches
git branch -a

# Delete branch
git branch -d feature/completed
git push origin --delete feature/completed
```

## **7. History and Tracking**
```bash
# View history
git log --oneline --graph --decorate
git log -p filename.txt  # File history

# Show changes
git show commit-hash
git blame filename.txt
```

## **8. Undoing Changes**
```bash
# Unstage changes
git restore --staged filename.txt

# Discard changes
git restore filename.txt

# Revert commit
git revert commit-hash

# Reset to previous state
git reset --hard HEAD~1  # Be careful!
```

## **9. Collaboration**
```bash
# Update fork with upstream
git remote add upstream https://github.com/original/repo.git
git fetch upstream
git merge upstream/main

# Create pull request branch
git checkout -b fix/issue-123
```

## **10. Advanced Topics**
```bash
# Stashing changes
git stash push -m "Work in progress"
git stash list
git stash pop

# Tagging releases
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0
```

## **11. Troubleshooting**
Common Issues and Solutions:
- **Merge Conflicts:**
  ```bash
  git status  # Identify conflicting files
  # Resolve conflicts in editor
  git add resolved-file.txt
  git commit -m "Resolve merge conflicts"
  ```

- **Authentication Issues:**
  ```bash
  git config --global credential.helper cache  # Cache credentials
  ```

- **Large File Issues:**
  ```bash
  git lfs install  # Install Git LFS
  git lfs track "*.psd"  # Track large files
  ```

---

For visual Git workflows and more advanced topics, check out:
- [Git Branching Model](https://nvie.com/posts/a-successful-git-branching-model/)
- [GitHub Flow](https://guides.github.com/introduction/flow/)
- [Git Cheat Sheet](https://education.github.com/git-cheat-sheet-education.pdf)
